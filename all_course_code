###############################################################################################################################
################################################### STEP 0: LOAD DATA #########################################################
###############################################################################################################################

# Load pickled data
import pickle

# TODO: Fill this in based on where you saved the training and testing data

training_file = ?
validation_file=?
testing_file = ?

with open(training_file, mode='rb') as f:
    train = pickle.load(f)
with open(validation_file, mode='rb') as f:
    valid = pickle.load(f)
with open(testing_file, mode='rb') as f:
    test = pickle.load(f)
    
X_train, y_train = train['features'], train['labels']
X_valid, y_valid = valid['features'], valid['labels']
X_test, y_test = test['features'], test['labels']

#############################################################################################################################
######################################### STEP 1: DATASET SUMMARY AND EXPLORATION ###########################################
#############################################################################################################################

### Replace each question mark with the appropriate value. 
### Use python, pandas or numpy methods rather than hard coding the results

# TODO: Number of training examples
n_train = ?

# TODO: Number of validation examples
n_validation = ?

# TODO: Number of testing examples.
n_test = ?

# TODO: What's the shape of an traffic sign image?
image_shape = ?

# TODO: How many unique classes/labels there are in the dataset.
n_classes = ?

print("Number of training examples =", n_train)
print("Number of testing examples =", n_test)
print("Image data shape =", image_shape)
print("Number of classes =", n_classes)

### Data exploration visualization code goes here.
### Feel free to use as many code cells as needed.
import matplotlib.pyplot as plt
# Visualizations will be shown in the notebook.
%matplotlib inline
#############################################################################################################################
######################################## STEP 2: DESIGN AND TEST A MODEL ARCHITECTURE #######################################
#############################################################################################################################

### Preprocess the data here. It is required to normalize the data. Other preprocessing steps could include ### Pre 
### converting to grayscale, etc.
### Feel free to use as many code cells as needed.

### Define your architecture here.
### Feel free to use as many code cells as needed.

### Train your model here.
### Calculate and report the accuracy on the training and validation set.
### Once a final model architecture is selected, 
### the accuracy on the test set should be calculated and reported as well.
### Feel free to use as many code cells as needed.

#############################################################################################################################
########################################## STEP 3: TEST A MODEL ON NEW IMAGES ###############################################
#############################################################################################################################

### Load the images and plot them here.
### Feel free to use as many code cells as needed.


### Run the predictions here and use the model to output the prediction for each image.### Run 
### Make sure to pre-process the images with the same pre-processing pipeline used earlier.
### Feel free to use as many code cells as needed.

### Calculate the accuracy for these 5 new images. 
### For example, if the model predicted 1 out of 5 signs correctly, it's 20% accurate on these new images.

### Print out the top five softmax probabilities for the predictions on the German traffic sign images found on the web. 
### Feel free to use as many code cells as needed.
